PS C:\Users\hann\Desktop\model_sendiri> python run_bot.py
ðŸ”„ Mengeksekusi prediksi dan trading...
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
C:\Users\hann\Desktop\model_sendiri\run_bot.py:65: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[f'{ind}_prev{i}'] = df[ind].shift(i)
Traceback (most recent call last):
  File "C:\Users\hann\Desktop\model_sendiri\run_bot.py", line 135, in <module>
    pred = model.predict(last_row)[0]
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\core.py", line 729, in inner_f
    return func(**kwargs)
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\sklearn.py", line 1718, in predict
    class_probs = super().predict(
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\core.py", line 729, in inner_f
    return func(**kwargs)
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\sklearn.py", line 1327, in predict
    predts = self.get_booster().inplace_predict(
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\core.py", line 729, in inner_f
    return func(**kwargs)
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\core.py", line 2667, in inplace_predict
    self._validate_features(fns)
  File "C:\Users\hann\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\xgboost\core.py", line 3243, in _validate_features
    raise ValueError(msg.format(self.feature_names, feature_names))
ValueError: feature_names mismatch: ['open', 'high', 'low', 'close', 'tick_volume', 'rsi', 'stoch_k', 'cci', 'ema_fast', 'ema_slow', 'adx', 'macd_hist', 'bb_width', 'atr', 'obv', 'mfi', 'trend_up_emas', 'price_above_ema100', 'slope_ema30'] ['spread', 'real_volume', 'rsi', 'stoch_k', 'cci', 'ema_fast', 'ema_slow', 'adx', 'macd_hist', 'bb_width', 'atr', 'obv', 'mfi', 'ema100', 'trend_up_emas', 'price_above_ema100', 'slope_ema30', 'rsi_prev1', 'stoch_k_prev1', 'cci_prev1', 'ema_fast_prev1', 'ema_slow_prev1', 'adx_prev1', 'macd_hist_prev1', 'bb_width_prev1', 'atr_prev1', 'obv_prev1', 'mfi_prev1', 'ema100_prev1', 'trend_up_emas_prev1', 'price_above_ema100_prev1', 'slope_ema30_prev1', 'rsi_prev2', 'stoch_k_prev2', 'cci_prev2', 'ema_fast_prev2', 'ema_slow_prev2', 'adx_prev2', 'macd_hist_prev2', 'bb_width_prev2', 'atr_prev2', 'obv_prev2', 'mfi_prev2', 'ema100_prev2', 'trend_up_emas_prev2', 'price_above_ema100_prev2', 'slope_ema30_prev2', 'rsi_prev3', 'stoch_k_prev3', 'cci_prev3', 'ema_fast_prev3', 'ema_slow_prev3', 'adx_prev3', 'macd_hist_prev3', 'bb_width_prev3', 'atr_prev3', 'obv_prev3', 'mfi_prev3', 'ema100_prev3', 'trend_up_emas_prev3', 'price_above_ema100_prev3', 'slope_ema30_prev3', 'rsi_prev4', 'stoch_k_prev4', 'cci_prev4', 'ema_fast_prev4', 'ema_slow_prev4', 'adx_prev4', 'macd_hist_prev4', 'bb_width_prev4', 'atr_prev4', 'obv_prev4', 'mfi_prev4', 'ema100_prev4', 'trend_up_emas_prev4', 'price_above_ema100_prev4', 'slope_ema30_prev4', 'rsi_prev5', 'stoch_k_prev5', 'cci_prev5', 'ema_fast_prev5', 'ema_slow_prev5', 'adx_prev5', 'macd_hist_prev5', 'bb_width_prev5', 'atr_prev5', 'obv_prev5', 'mfi_prev5', 'ema100_prev5', 'trend_up_emas_prev5', 'price_above_ema100_prev5', 'slope_ema30_prev5', 'rsi_prev6', 'stoch_k_prev6', 'cci_prev6', 'ema_fast_prev6', 'ema_slow_prev6', 'adx_prev6', 'macd_hist_prev6', 'bb_width_prev6', 'atr_prev6', 'obv_prev6', 'mfi_prev6', 'ema100_prev6', 'trend_up_emas_prev6', 'price_above_ema100_prev6', 'slope_ema30_prev6', 'rsi_prev7', 'stoch_k_prev7', 'cci_prev7', 'ema_fast_prev7', 'ema_slow_prev7', 'adx_prev7', 'macd_hist_prev7', 'bb_width_prev7', 'atr_prev7', 'obv_prev7', 'mfi_prev7', 'ema100_prev7', 'trend_up_emas_prev7', 'price_above_ema100_prev7', 'slope_ema30_prev7', 'rsi_prev8', 'stoch_k_prev8', 'cci_prev8', 'ema_fast_prev8', 'ema_slow_prev8', 'adx_prev8', 'macd_hist_prev8', 'bb_width_prev8', 'atr_prev8', 'obv_prev8', 'mfi_prev8', 'ema100_prev8', 'trend_up_emas_prev8', 'price_above_ema100_prev8', 'slope_ema30_prev8', 'rsi_prev9', 'stoch_k_prev9', 'cci_prev9', 'ema_fast_prev9', 'ema_slow_prev9', 'adx_prev9', 'macd_hist_prev9', 'bb_width_prev9', 'atr_prev9', 'obv_prev9', 'mfi_prev9', 'ema100_prev9', 'trend_up_emas_prev9', 'price_above_ema100_prev9', 'slope_ema30_prev9', 'rsi_prev10', 'stoch_k_prev10', 'cci_prev10', 'ema_fast_prev10', 'ema_slow_prev10', 'adx_prev10', 'macd_hist_prev10', 'bb_width_prev10', 'atr_prev10', 'obv_prev10', 'mfi_prev10', 'ema100_prev10', 'trend_up_emas_prev10', 'price_above_ema100_prev10', 'slope_ema30_prev10', 'rsi_prev11', 'stoch_k_prev11', 'cci_prev11', 'ema_fast_prev11', 'ema_slow_prev11', 'adx_prev11', 'macd_hist_prev11', 'bb_width_prev11', 'atr_prev11', 'obv_prev11', 'mfi_prev11', 'ema100_prev11', 'trend_up_emas_prev11', 'price_above_ema100_prev11', 'slope_ema30_prev11', 'rsi_prev12', 'stoch_k_prev12', 'cci_prev12', 'ema_fast_prev12', 'ema_slow_prev12', 'adx_prev12', 'macd_hist_prev12', 'bb_width_prev12', 'atr_prev12', 'obv_prev12', 'mfi_prev12', 'ema100_prev12', 'trend_up_emas_prev12', 'price_above_ema100_prev12', 'slope_ema30_prev12', 'rsi_prev13', 'stoch_k_prev13', 'cci_prev13', 'ema_fast_prev13', 'ema_slow_prev13', 'adx_prev13', 'macd_hist_prev13', 'bb_width_prev13', 'atr_prev13', 'obv_prev13', 'mfi_prev13', 'ema100_prev13', 'trend_up_emas_prev13', 'price_above_ema100_prev13', 'slope_ema30_prev13', 'rsi_prev14', 'stoch_k_prev14', 'cci_prev14', 'ema_fast_prev14', 'ema_slow_prev14', 'adx_prev14', 'macd_hist_prev14', 'bb_width_prev14', 'atr_prev14', 'obv_prev14', 'mfi_prev14', 'ema100_prev14', 'trend_up_emas_prev14', 'price_above_ema100_prev14', 'slope_ema30_prev14', 'rsi_prev15', 'stoch_k_prev15', 'cci_prev15', 'ema_fast_prev15', 'ema_slow_prev15', 'adx_prev15', 'macd_hist_prev15', 'bb_width_prev15', 'atr_prev15', 'obv_prev15', 'mfi_prev15', 'ema100_prev15', 'trend_up_emas_prev15', 'price_above_ema100_prev15', 'slope_ema30_prev15']
expected close, tick_volume, high, low, open in input data
training data did not have the following fields: cci_prev2, bb_width_prev8, stoch_k_prev1, ema100, price_above_ema100_prev11, ema_slow_prev4, price_above_ema100_prev4, adx_prev5, adx_prev12, price_above_ema100_prev15, trend_up_emas_prev8, atr_prev5, bb_width_prev9, ema100_prev1, obv_prev6, mfi_prev12, ema_slow_prev5, rsi_prev10, ema_slow_prev14, cci_prev15, ema_fast_prev9, trend_up_emas_prev5, atr_prev2, bb_width_prev4, adx_prev3, bb_width_prev5, ema100_prev10, mfi_prev3, cci_prev10, ema100_prev13, price_above_ema100_prev6, bb_width_prev12, ema_slow_prev7, ema100_prev5, price_above_ema100_prev3, slope_ema30_prev1, trend_up_emas_prev3, cci_prev4, slope_ema30_prev6, price_above_ema100_prev9, atr_prev4, rsi_prev9, slope_ema30_prev14, mfi_prev7, bb_width_prev7, slope_ema30_prev7, price_above_ema100_prev2, ema_slow_prev11, stoch_k_prev3, slope_ema30_prev2, stoch_k_prev6, mfi_prev10, ema_slow_prev9, ema_fast_prev5, slope_ema30_prev10, ema100_prev2, rsi_prev2, cci_prev1, adx_prev2, macd_hist_prev12, rsi_prev11, bb_width_prev15, atr_prev12, macd_hist_prev10, obv_prev14, rsi_prev4, obv_prev8, ema_fast_prev4, trend_up_emas_prev13, bb_width_prev3, rsi_prev12, adx_prev6, atr_prev13, ema100_prev11, stoch_k_prev12, stoch_k_prev15, cci_prev14, obv_prev11, atr_prev1, stoch_k_prev4, obv_prev4, trend_up_emas_prev4, obv_prev9, cci_prev13, ema_fast_prev15, bb_width_prev13, ema100_prev7, price_above_ema100_prev14, ema_fast_prev3, mfi_prev15, mfi_prev5, macd_hist_prev9, price_above_ema100_prev1, ema_fast_prev11, atr_prev11, adx_prev14, price_above_ema100_prev13, trend_up_emas_prev1, slope_ema30_prev4, price_above_ema100_prev12, atr_prev14, rsi_prev6, rsi_prev5, obv_prev12, slope_ema30_prev12, ema_slow_prev2, ema_slow_prev15, bb_width_prev1, obv_prev3, mfi_prev14, rsi_prev7, cci_prev11, macd_hist_prev14, stoch_k_prev5, atr_prev3, atr_prev10, obv_prev7, ema100_prev12, ema_slow_prev3, stoch_k_prev2, stoch_k_prev11, slope_ema30_prev15, ema_fast_prev13, slope_ema30_prev13, trend_up_emas_prev15, ema100_prev3, obv_prev5, macd_hist_prev8, mfi_prev2, macd_hist_prev5, adx_prev8, bb_width_prev10, mfi_prev1, adx_prev11, ema_slow_prev12, obv_prev10, trend_up_emas_prev14, stoch_k_prev7, ema_fast_prev8, stoch_k_prev13, cci_prev3, macd_hist_prev3, ema_fast_prev6, price_above_ema100_prev10, macd_hist_prev11, stoch_k_prev14, stoch_k_prev10, price_above_ema100_prev7, rsi_prev3, atr_prev9, ema_fast_prev2, mfi_prev8, stoch_k_prev9, adx_prev9, adx_prev15, cci_prev12, slope_ema30_prev8, ema_slow_prev1, trend_up_emas_prev6, trend_up_emas_prev11, adx_prev4, macd_hist_prev13, cci_prev5, ema100_prev14, rsi_prev8, mfi_prev4, rsi_prev15, obv_prev1, slope_ema30_prev11, ema_slow_prev6, ema_slow_prev8, trend_up_emas_prev10, adx_prev1, cci_prev9, macd_hist_prev1, cci_prev6, macd_hist_prev7, ema_fast_prev14, bb_width_prev11, cci_prev8, macd_hist_prev6, atr_prev7, slope_ema30_prev9, trend_up_emas_prev2, rsi_prev13, ema_fast_prev1, mfi_prev9, cci_prev7, obv_prev2, ema_fast_prev7, ema100_prev15, real_volume, obv_prev15, atr_prev15, ema_fast_prev10, stoch_k_prev8, macd_hist_prev2, adx_prev13, ema100_prev6, trend_up_emas_prev7, bb_width_prev2, bb_width_prev6, obv_prev13, spread, slope_ema30_prev3, slope_ema30_prev5, ema100_prev9, mfi_prev13, adx_prev10, atr_prev6, price_above_ema100_prev8, ema_fast_prev12, bb_width_prev14, macd_hist_prev15, mfi_prev6, price_above_ema100_prev5, rsi_prev1, macd_hist_prev4, ema100_prev8, adx_prev7, atr_prev8, trend_up_emas_prev9, rsi_prev14, ema100_prev4, ema_slow_prev13, mfi_prev11, trend_up_emas_prev12, ema_slow_prev10
PS C:\Users\hann\Desktop\model_sendiri> 
